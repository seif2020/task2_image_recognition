{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "The AWS CloudFormation template for this Serverless application",
  "Resources": {
    "ServerlessDeploymentBucket": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "BucketEncryption": {
          "ServerSideEncryptionConfiguration": [
            {
              "ServerSideEncryptionByDefault": {
                "SSEAlgorithm": "AES256"
              }
            }
          ]
        }
      }
    },
    "ServerlessDeploymentBucketPolicy": {
      "Type": "AWS::S3::BucketPolicy",
      "Properties": {
        "Bucket": {
          "Ref": "ServerlessDeploymentBucket"
        },
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "s3:*",
              "Effect": "Deny",
              "Principal": "*",
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":s3:::",
                      {
                        "Ref": "ServerlessDeploymentBucket"
                      },
                      "/*"
                    ]
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":s3:::",
                      {
                        "Ref": "ServerlessDeploymentBucket"
                      }
                    ]
                  ]
                }
              ],
              "Condition": {
                "Bool": {
                  "aws:SecureTransport": false
                }
              }
            }
          ]
        }
      }
    },
    "CreateBlobLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/task-2-image-recognition-dev-createBlob"
      }
    },
    "ProcessBlobLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/task-2-image-recognition-dev-processBlob"
      }
    },
    "CallbackClientLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/task-2-image-recognition-dev-callbackClient"
      }
    },
    "CreateBlobLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/task-2-image-recognition/dev/1635540272204-2021-10-29T20:44:32.204Z/task-2-image-recognition.zip"
        },
        "Handler": "create_blob.handler",
        "Runtime": "python3.8",
        "FunctionName": "task-2-image-recognition-dev-createBlob",
        "MemorySize": 1024,
        "Timeout": 6,
        "Description": "generate new blob id and request a presigned url form s3 bucket",
        "Environment": {
          "Variables": {
            "bucketName": "dev-blob-upload-image"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "FuncRole",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "CreateBlobLogGroup",
        "FuncRole"
      ]
    },
    "ProcessBlobLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/task-2-image-recognition/dev/1635540272204-2021-10-29T20:44:32.204Z/task-2-image-recognition.zip"
        },
        "Handler": "process_blob.handler",
        "Runtime": "python3.8",
        "FunctionName": "task-2-image-recognition-dev-processBlob",
        "MemorySize": 1024,
        "Timeout": 6,
        "Description": "triggered when a new image uploaded to the upload bucket to start image recognition process",
        "Role": {
          "Fn::GetAtt": [
            "FuncRole",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "ProcessBlobLogGroup",
        "FuncRole"
      ]
    },
    "CallbackClientLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/task-2-image-recognition/dev/1635540272204-2021-10-29T20:44:32.204Z/task-2-image-recognition.zip"
        },
        "Handler": "make_callback.handler",
        "Runtime": "python3.8",
        "FunctionName": "task-2-image-recognition-dev-callbackClient",
        "MemorySize": 1024,
        "Timeout": 6,
        "Description": "triggered when recognition process update blobs table with the resul",
        "Role": {
          "Fn::GetAtt": [
            "CallBackRole",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "CallbackClientLogGroup",
        "CallBackRole"
      ]
    },
    "CreateBlobLambdaVersionfqzaAggj5k2IXPpErXWOdmwqPlg1GPfgfewfncUjwM": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "CreateBlobLambdaFunction"
        },
        "CodeSha256": "I9U4OnHEYPjHf4rTN5DDqRFeCeEElV1p+nUAOZWL8R4=",
        "Description": "generate new blob id and request a presigned url form s3 bucket"
      }
    },
    "ProcessBlobLambdaVersionoljtYPUxjDa5uxbVSpDSdUzhI8CXjEShU7WCvzjPHM": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "ProcessBlobLambdaFunction"
        },
        "CodeSha256": "I9U4OnHEYPjHf4rTN5DDqRFeCeEElV1p+nUAOZWL8R4=",
        "Description": "triggered when a new image uploaded to the upload bucket to start image recognition process"
      }
    },
    "CallbackClientLambdaVersion6LJqVf2NysqefzrYjAzFX06sk9yOVw2eBl90aJJE": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "CallbackClientLambdaFunction"
        },
        "CodeSha256": "I9U4OnHEYPjHf4rTN5DDqRFeCeEElV1p+nUAOZWL8R4=",
        "Description": "triggered when recognition process update blobs table with the resul"
      }
    },
    "ProcessBlobCustomS31": {
      "Type": "Custom::S3",
      "Version": 1,
      "DependsOn": [
        "ProcessBlobLambdaFunction",
        "CustomDashresourceDashexistingDashs3LambdaFunction"
      ],
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "CustomDashresourceDashexistingDashs3LambdaFunction",
            "Arn"
          ]
        },
        "FunctionName": "task-2-image-recognition-dev-processBlob",
        "BucketName": {
          "Ref": "uploadBucket"
        },
        "BucketConfigs": [
          {
            "Event": "s3:ObjectCreated:*",
            "Rules": []
          }
        ]
      }
    },
    "IamRoleCustomResourcesLambdaExecution": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": {
              "Fn::Join": [
                "-",
                [
                  "dev",
                  "task-2-image-recognition",
                  "custom-resources-lambda"
                ]
              ]
            },
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Resource": {
                    "Fn::Join": [
                      ":",
                      [
                        "arn",
                        {
                          "Ref": "AWS::Partition"
                        },
                        "s3",
                        "",
                        "",
                        {
                          "Ref": "uploadBucket"
                        }
                      ]
                    ]
                  },
                  "Action": [
                    "s3:PutBucketNotification",
                    "s3:GetBucketNotification"
                  ]
                },
                {
                  "Effect": "Allow",
                  "Resource": {
                    "Fn::Join": [
                      ":",
                      [
                        "arn",
                        {
                          "Ref": "AWS::Partition"
                        },
                        "lambda",
                        {
                          "Ref": "AWS::Region"
                        },
                        {
                          "Ref": "AWS::AccountId"
                        },
                        "function",
                        "*"
                      ]
                    ]
                  },
                  "Action": [
                    "lambda:AddPermission",
                    "lambda:RemovePermission"
                  ]
                }
              ]
            }
          }
        ]
      }
    },
    "CustomDashresourceDashexistingDashs3LambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/task-2-image-recognition/dev/1635540272204-2021-10-29T20:44:32.204Z/custom-resources.zip"
        },
        "FunctionName": "task-2-image-recognition-dev-custom-resource-existing-s3",
        "Handler": "s3/handler.handler",
        "MemorySize": 1024,
        "Runtime": "nodejs12.x",
        "Timeout": 180,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleCustomResourcesLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "IamRoleCustomResourcesLambdaExecution"
      ]
    },
    "ApiGatewayRestApi": {
      "Type": "AWS::ApiGateway::RestApi",
      "Properties": {
        "Name": "dev-task-2-image-recognition",
        "EndpointConfiguration": {
          "Types": [
            "EDGE"
          ]
        },
        "Policy": ""
      }
    },
    "ApiGatewayResourceRequrl": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "reqUrl",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodRequrlPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceRequrl"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "CreateBlobLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          },
          "PassthroughBehavior": "NEVER",
          "RequestTemplates": {
            "application/json": "\n    #set( $body = $input.json(\"$\") )\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  ",
            "application/x-www-form-urlencoded": "\n    #define( $body )\n      {\n      #foreach( $token in $input.path('$').split('&') )\n        #set( $keyVal = $token.split('=') )\n        #set( $keyValSize = $keyVal.size() )\n        #if( $keyValSize >= 1 )\n          #set( $key = $util.escapeJavaScript($util.urlDecode($keyVal[0])) )\n          #if( $keyValSize >= 2 )\n            #set($val = $util.escapeJavaScript($util.urlDecode($keyVal[1])).replaceAll(\"\\\\'\",\"'\"))\n          #else\n            #set( $val = '' )\n          #end\n          \"$key\": \"$val\"#if($foreach.hasNext),#end\n        #end\n      #end\n      }\n    #end\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  "
          },
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "SelectionPattern": "",
              "ResponseParameters": {},
              "ResponseTemplates": {}
            },
            {
              "StatusCode": "400",
              "SelectionPattern": "[\\s\\S]*\\[400\\][\\s\\S]*",
              "ResponseParameters": {},
              "ResponseTemplates": {}
            },
            {
              "StatusCode": "401",
              "SelectionPattern": "[\\s\\S]*\\[401\\][\\s\\S]*",
              "ResponseParameters": {},
              "ResponseTemplates": {}
            },
            {
              "StatusCode": "403",
              "SelectionPattern": "[\\s\\S]*\\[403\\][\\s\\S]*",
              "ResponseParameters": {},
              "ResponseTemplates": {}
            },
            {
              "StatusCode": "404",
              "SelectionPattern": "[\\s\\S]*\\[404\\][\\s\\S]*",
              "ResponseParameters": {},
              "ResponseTemplates": {}
            },
            {
              "StatusCode": "422",
              "SelectionPattern": "[\\s\\S]*\\[422\\][\\s\\S]*",
              "ResponseParameters": {},
              "ResponseTemplates": {}
            },
            {
              "StatusCode": "500",
              "SelectionPattern": "[\\s\\S]*(Process\\s?exited\\s?before\\s?completing\\s?request|\\[500\\])[\\s\\S]*",
              "ResponseParameters": {},
              "ResponseTemplates": {}
            },
            {
              "StatusCode": "502",
              "SelectionPattern": "[\\s\\S]*\\[502\\][\\s\\S]*",
              "ResponseParameters": {},
              "ResponseTemplates": {}
            },
            {
              "StatusCode": "504",
              "SelectionPattern": "([\\s\\S]*\\[504\\][\\s\\S]*)|(.*Task timed out after \\d+\\.\\d+ seconds$)",
              "ResponseParameters": {},
              "ResponseTemplates": {}
            }
          ]
        },
        "MethodResponses": [
          {
            "ResponseParameters": {},
            "ResponseModels": {},
            "StatusCode": "200"
          },
          {
            "ResponseParameters": {},
            "ResponseModels": {},
            "StatusCode": "400"
          },
          {
            "ResponseParameters": {},
            "ResponseModels": {},
            "StatusCode": "401"
          },
          {
            "ResponseParameters": {},
            "ResponseModels": {},
            "StatusCode": "403"
          },
          {
            "ResponseParameters": {},
            "ResponseModels": {},
            "StatusCode": "404"
          },
          {
            "ResponseParameters": {},
            "ResponseModels": {},
            "StatusCode": "422"
          },
          {
            "ResponseParameters": {},
            "ResponseModels": {},
            "StatusCode": "500"
          },
          {
            "ResponseParameters": {},
            "ResponseModels": {},
            "StatusCode": "502"
          },
          {
            "ResponseParameters": {},
            "ResponseModels": {},
            "StatusCode": "504"
          }
        ]
      },
      "DependsOn": [
        "CreateBlobLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayDeployment1635540250626": {
      "Type": "AWS::ApiGateway::Deployment",
      "Properties": {
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "StageName": "dev"
      },
      "DependsOn": [
        "ApiGatewayMethodRequrlPost"
      ]
    },
    "CreateBlobLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "CreateBlobLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "CallbackClientEventSourceMappingDynamodbBlobsTable": {
      "Type": "AWS::Lambda::EventSourceMapping",
      "DependsOn": [
        "CallBackRole"
      ],
      "Properties": {
        "BatchSize": 1,
        "Enabled": true,
        "EventSourceArn": {
          "Fn::GetAtt": [
            "blobsTable",
            "StreamArn"
          ]
        },
        "FunctionName": {
          "Fn::GetAtt": [
            "CallbackClientLambdaFunction",
            "Arn"
          ]
        },
        "StartingPosition": "TRIM_HORIZON"
      }
    },
    "uploadBucket": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "BucketName": "dev-blob-upload-image",
        "AccessControl": "Private",
        "CorsConfiguration": {
          "CorsRules": [
            {
              "AllowedMethods": [
                "PUT",
                "GET",
                "POST",
                "HEAD"
              ],
              "AllowedOrigins": [
                "*"
              ],
              "AllowedHeaders": [
                "*"
              ]
            }
          ]
        }
      }
    },
    "BucketPolicyBlobBucket": {
      "Type": "AWS::S3::BucketPolicy",
      "Properties": {
        "Bucket": {
          "Ref": "uploadBucket"
        },
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": "*",
              "Action": [
                "s3:*"
              ],
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:aws:s3:::",
                      {
                        "Ref": "uploadBucket"
                      },
                      "/*"
                    ]
                  ]
                }
              ]
            }
          ]
        }
      }
    },
    "blobsTable": {
      "Type": "AWS::DynamoDB::Table",
      "Properties": {
        "TableName": "blobs",
        "AttributeDefinitions": [
          {
            "AttributeName": "blob_id",
            "AttributeType": "S"
          }
        ],
        "KeySchema": [
          {
            "AttributeName": "blob_id",
            "KeyType": "HASH"
          }
        ],
        "ProvisionedThroughput": {
          "ReadCapacityUnits": 1,
          "WriteCapacityUnits": 1
        },
        "StreamSpecification": {
          "StreamViewType": "NEW_AND_OLD_IMAGES"
        }
      }
    },
    "FuncRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "Path": "/service-role/",
        "RoleName": "dev-Func-role",
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": "FuncPolicy",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "s3:*"
                  ],
                  "Resource": [
                    {
                      "Fn::Join": [
                        "",
                        [
                          "arn:aws:s3:::",
                          {
                            "Ref": "uploadBucket"
                          },
                          "/*"
                        ]
                      ]
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "dynamodb:*"
                  ],
                  "Resource": {
                    "Fn::GetAtt": [
                      "blobsTable",
                      "Arn"
                    ]
                  }
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents"
                  ],
                  "Resource": "*"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "rekognition:DetectLabels"
                  ],
                  "Resource": "*"
                }
              ]
            }
          }
        ]
      }
    },
    "CallBackRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "Path": "/service-role/",
        "RoleName": "dev-callback-role",
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": "callbackPolicy",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "dynamodb:*",
                    "dynamodb:GetRecords",
                    "dynamodb:GetShardIterator",
                    "dynamodb:DescribeStream",
                    "dynamodb:ListShards",
                    "dynamodb:ListStreams"
                  ],
                  "Resource": [
                    "arn:aws:dynamodb:us-east-1:888360479994:table/blobs/stream/*"
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents"
                  ],
                  "Resource": "*"
                }
              ]
            }
          }
        ]
      }
    },
    "ApiGatewayDynamoRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "RoleName": "dev-ApiGatewayDynamoRole",
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": "apigateway.amazonaws.com"
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": "ApiGatewayDynamoPolicy",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "dynamodb:Query"
                  ],
                  "Resource": [
                    {
                      "Fn::GetAtt": [
                        "blobsTable",
                        "Arn"
                      ]
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "dynamodb:ListTables"
                  ],
                  "Resource": "*",
                  "Condition": {}
                }
              ]
            }
          }
        ]
      }
    },
    "ProxyResource": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "blobs",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ProxyMethod": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "ResourceId": {
          "Ref": "ProxyResource"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "HttpMethod": "GET",
        "MethodResponses": [
          {
            "StatusCode": 200
          }
        ],
        "AuthorizationType": "NONE",
        "RequestParameters": {
          "method.request.querystring.blob_id": true
        },
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS",
          "Uri": "arn:aws:apigateway:us-east-1:dynamodb:action/Query",
          "RequestParameters": {
            "integration.request.querystring.blob_id": "method.request.querystring.blob_id"
          },
          "Credentials": {
            "Fn::GetAtt": [
              "ApiGatewayDynamoRole",
              "Arn"
            ]
          },
          "RequestTemplates": {
            "application/json": "{  \"TableName\" : \"blobs\",\n   \"KeyConditionExpression\": \"blob_id = :v\",\n   \"ExpressionAttributeValues\" : \n   { \":v\" :{\"S\" : \"$input.params('blob_id')\"}}\n}  \n"
          },
          "IntegrationResponses": [
            {
              "StatusCode": "200"
            },
            {
              "StatusCode": "400"
            }
          ]
        }
      }
    },
    "ProxyDeployment": {
      "Type": "AWS::ApiGateway::Deployment",
      "DependsOn": [
        "ProxyMethod"
      ],
      "Properties": {
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "StageName": "dev"
      }
    }
  },
  "Outputs": {
    "ServerlessDeploymentBucketName": {
      "Value": {
        "Ref": "ServerlessDeploymentBucket"
      },
      "Export": {
        "Name": "sls-task-2-image-recognition-dev-ServerlessDeploymentBucketName"
      }
    },
    "CreateBlobLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "CreateBlobLambdaVersionfqzaAggj5k2IXPpErXWOdmwqPlg1GPfgfewfncUjwM"
      },
      "Export": {
        "Name": "sls-task-2-image-recognition-dev-CreateBlobLambdaFunctionQualifiedArn"
      }
    },
    "ProcessBlobLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "ProcessBlobLambdaVersionoljtYPUxjDa5uxbVSpDSdUzhI8CXjEShU7WCvzjPHM"
      },
      "Export": {
        "Name": "sls-task-2-image-recognition-dev-ProcessBlobLambdaFunctionQualifiedArn"
      }
    },
    "CallbackClientLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "CallbackClientLambdaVersion6LJqVf2NysqefzrYjAzFX06sk9yOVw2eBl90aJJE"
      },
      "Export": {
        "Name": "sls-task-2-image-recognition-dev-CallbackClientLambdaFunctionQualifiedArn"
      }
    },
    "ServiceEndpoint": {
      "Description": "URL of the service endpoint",
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://",
            {
              "Ref": "ApiGatewayRestApi"
            },
            ".execute-api.",
            {
              "Ref": "AWS::Region"
            },
            ".",
            {
              "Ref": "AWS::URLSuffix"
            },
            "/dev"
          ]
        ]
      },
      "Export": {
        "Name": "sls-task-2-image-recognition-dev-ServiceEndpoint"
      }
    },
    "uploadBucket": {
      "Description": "the bucket that the client upload images to",
      "Value": "uploadBucket"
    }
  }
}